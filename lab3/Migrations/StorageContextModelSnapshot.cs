// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NTR.Entities;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NTR.Migrations
{
    [DbContext(typeof(StorageContext))]
    partial class StorageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("NTR.Entities.ApprovedActivity", b =>
                {
                    b.Property<DateTime>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text")
                        .HasColumnName("project_id");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.HasKey("Month", "UserName", "ProjectId")
                        .HasName("pk_approved_activities");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_approved_activities_project_id");

                    b.ToTable("approved_activities");
                });

            modelBuilder.Entity("NTR.Entities.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("text")
                        .HasColumnName("project_id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("Budget")
                        .HasColumnType("integer")
                        .HasColumnName("budget");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("manager_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ProjectId")
                        .HasName("pk_projects");

                    b.HasIndex("ManagerName")
                        .HasDatabaseName("ix_projects_manager_name");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("NTR.Entities.Subactivity", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("text")
                        .HasColumnName("project_id");

                    b.Property<string>("SubactivityId")
                        .HasColumnType("text")
                        .HasColumnName("subactivity_id");

                    b.HasKey("ProjectId", "SubactivityId")
                        .HasName("pk_subactivities");

                    b.ToTable("subactivities");
                });

            modelBuilder.Entity("NTR.Entities.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("NTR.Entities.UserActivity", b =>
                {
                    b.Property<DateTime>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text")
                        .HasColumnName("project_id");

                    b.Property<string>("SubactivityId")
                        .HasColumnType("text")
                        .HasColumnName("subactivity_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.HasKey("Month", "UserName", "ProjectId", "SubactivityId", "Date")
                        .HasName("pk_user_activities");

                    b.HasIndex("ProjectId", "SubactivityId")
                        .HasDatabaseName("ix_user_activities_project_id_subactivity_id");

                    b.ToTable("user_activities");
                });

            modelBuilder.Entity("NTR.Entities.UserMonth", b =>
                {
                    b.Property<DateTime>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<bool>("Frozen")
                        .HasColumnType("boolean")
                        .HasColumnName("frozen");

                    b.HasKey("Month", "UserName")
                        .HasName("pk_user_months");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_user_months_user_name");

                    b.ToTable("user_months");
                });

            modelBuilder.Entity("NTR.Entities.ApprovedActivity", b =>
                {
                    b.HasOne("NTR.Entities.Project", "Project")
                        .WithMany("ApprovedActivities")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_approved_activities_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTR.Entities.UserMonth", "UserMonth")
                        .WithMany("ApprovedActivities")
                        .HasForeignKey("Month", "UserName")
                        .HasConstraintName("fk_approved_activities_user_months_user_month_month_user_month")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserMonth");
                });

            modelBuilder.Entity("NTR.Entities.Project", b =>
                {
                    b.HasOne("NTR.Entities.User", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerName")
                        .HasConstraintName("fk_projects_users_manager_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("NTR.Entities.Subactivity", b =>
                {
                    b.HasOne("NTR.Entities.Project", "Project")
                        .WithMany("Subactivities")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_subactivities_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NTR.Entities.UserActivity", b =>
                {
                    b.HasOne("NTR.Entities.UserMonth", "UserMonth")
                        .WithMany("UserActivities")
                        .HasForeignKey("Month", "UserName")
                        .HasConstraintName("fk_user_activities_user_months_month_user_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTR.Entities.Subactivity", "Subactivity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ProjectId", "SubactivityId")
                        .HasConstraintName("fk_user_activities_subactivities_project_id_subactivity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subactivity");

                    b.Navigation("UserMonth");
                });

            modelBuilder.Entity("NTR.Entities.UserMonth", b =>
                {
                    b.HasOne("NTR.Entities.User", "User")
                        .WithMany("UserMonths")
                        .HasForeignKey("UserName")
                        .HasConstraintName("fk_user_months_users_user_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NTR.Entities.Project", b =>
                {
                    b.Navigation("ApprovedActivities");

                    b.Navigation("Subactivities");
                });

            modelBuilder.Entity("NTR.Entities.Subactivity", b =>
                {
                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("NTR.Entities.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("UserMonths");
                });

            modelBuilder.Entity("NTR.Entities.UserMonth", b =>
                {
                    b.Navigation("ApprovedActivities");

                    b.Navigation("UserActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
