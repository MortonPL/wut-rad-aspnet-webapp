// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NTR.Entities;

namespace NTR.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20211221203410_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("NTR.Entities.ApprovedActivity", b =>
                {
                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Month", "UserName", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ApprovedActivities");
                });

            modelBuilder.Entity("NTR.Entities.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.HasIndex("ManagerName");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NTR.Entities.Subactivity", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubactivityId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProjectId", "SubactivityId");

                    b.ToTable("Subactivities");
                });

            modelBuilder.Entity("NTR.Entities.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NTR.Entities.UserActivity", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("SubactivityId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Pid", "Month", "UserName", "ProjectId");

                    b.HasIndex("Month", "UserName");

                    b.HasIndex("ProjectId", "SubactivityId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("NTR.Entities.UserMonth", b =>
                {
                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Frozen")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Month", "UserName");

                    b.HasIndex("UserName");

                    b.ToTable("UserMonths");
                });

            modelBuilder.Entity("NTR.Entities.ApprovedActivity", b =>
                {
                    b.HasOne("NTR.Entities.Project", "Project")
                        .WithMany("ApprovedActivities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTR.Entities.UserMonth", "UserMonth")
                        .WithMany("ApprovedActivities")
                        .HasForeignKey("Month", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserMonth");
                });

            modelBuilder.Entity("NTR.Entities.Project", b =>
                {
                    b.HasOne("NTR.Entities.User", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("NTR.Entities.Subactivity", b =>
                {
                    b.HasOne("NTR.Entities.Project", "Project")
                        .WithMany("Subactivities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NTR.Entities.UserActivity", b =>
                {
                    b.HasOne("NTR.Entities.Project", "Project")
                        .WithMany("UserActivities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTR.Entities.UserMonth", "UserMonth")
                        .WithMany("UserActivities")
                        .HasForeignKey("Month", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTR.Entities.Subactivity", "Subactivity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ProjectId", "SubactivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Subactivity");

                    b.Navigation("UserMonth");
                });

            modelBuilder.Entity("NTR.Entities.UserMonth", b =>
                {
                    b.HasOne("NTR.Entities.User", "User")
                        .WithMany("UserMonths")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NTR.Entities.Project", b =>
                {
                    b.Navigation("ApprovedActivities");

                    b.Navigation("Subactivities");

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("NTR.Entities.Subactivity", b =>
                {
                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("NTR.Entities.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("UserMonths");
                });

            modelBuilder.Entity("NTR.Entities.UserMonth", b =>
                {
                    b.Navigation("ApprovedActivities");

                    b.Navigation("UserActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
